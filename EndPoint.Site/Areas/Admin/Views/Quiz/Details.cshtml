@using EndPoint.Site.Useful.Ultimite
@model Azmoon.Application.Service.Quiz.Dto.GetQuizDetWithQuestionPager
@addTagHelper *, LazZiya.TagHelpers
@{

    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}


<h1 class="mr-2">جزئیات آزمون</h1>

<div class="card w3-pale-red w3-text-black text-bold col-md-6 col-sm-12 p-3 m-1">
    <dl class="row">

        <dt class="col-sm-5">
            @Html.DisplayNameFor(model => model.GetQuizDetiles.Name)
        </dt>
        <dd class="col-sm-5">
            @Html.DisplayFor(model => model.GetQuizDetiles.Name)
        </dd>
        <dt class="col-sm-5">
            @Html.DisplayNameFor(model => model.GetQuizDetiles.StartDate)
        </dt>
        <dd class="col-sm-5">
            @Model.GetQuizDetiles.StartDate.ToPersianDateStrFarsi()
        </dd>
        <dt class="col-sm-5">
            @Html.DisplayNameFor(model => model.GetQuizDetiles.EndDate)
        </dt>
        <dd class="col-sm-5">
            @Model.GetQuizDetiles.EndDate.ToPersianDateStrFarsi()
        </dd>
        <dt class="col-sm-5">
            @Html.DisplayNameFor(model => model.GetQuizDetiles.Status)
        </dt>
        <dd class="col-sm-5">

            @{
                if (Model.GetQuizDetiles.Status == true)
                {
                    <span class="btn btn-success">فعال</span>
                }
                else
                {
                    <span class="btn btn-danger">غیر فعال</span>
                }

            }

        </dd>
        <dt class="col-sm-5">
            @Html.DisplayNameFor(model => model.GetQuizDetiles.Timer)
        </dt>
        <dd class="col-sm-5">
            @Html.DisplayFor(model => model.GetQuizDetiles.Timer)
        </dd>
        <dt class="col-sm-5">
            @Html.DisplayNameFor(model => model.GetQuizDetiles.CategoreName)
        </dt>
        <dd class="col-sm-5">
            @Html.DisplayFor(model => model.GetQuizDetiles.CategoreName)
        </dd>
        <dt class="col-sm-5">
            @Html.DisplayNameFor(model => model.GetQuizDetiles.MaxQuestion)
        </dt>
        <dd class="col-sm-5">
            @Html.DisplayFor(model => model.GetQuizDetiles.MaxQuestion)
        </dd>
    </dl>
</div>
<div>
    @Html.ActionLink("ویرایش", "Edit", new { id = Model.GetQuizDetiles.Id }, new { @class = "btn btn-outline-primary" })
    <a asp-action="Index" class="btn btn-outline-info">بازگشت به لیست</a>
    <a class="btn btn-outline-success"
       asp-action="Create" asp-route-id="@Model.GetQuizDetiles.Id" asp-controller="Question" data-quizId="@Model.GetQuizDetiles.Id" asp-area="Admin" onclick="document.getElementById('id01').style.display='block'">
        افزودن سوال
    </a>

   
</div>

<div class="w3-container">
 

    <div id="id01" class="w3-modal">
        <div class="w3-modal-content">
            <div class="w3-container">
              
                <div class="modal-header">
                    <h6 class="modal-title">افزودن  سوال</h6>
                    <button type="button" class="close" onclick="document.getElementById('id01').style.display='none'">&times;</button>
                </div>
                <form action="/Admin/Question/Create" method="post" id="formAddQuestion" class="m-2">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="QuizIdAddQuestion" name="QuizId"  value="@Model.GetQuizDetiles.Id"/>
                    <div class="form-group">
                        <h6 class="modal-title">متن  سوال</h6>
                        <textarea name="Text" id="TextAddQuestion" class="form-control col-12"></textarea>

                    </div>


                    <button type="button" onclick="submitFormAddQuestion(event)" class="btn btn-outline-primary ml-2 mt-3">ذخیره <i class="fa fa-save" style="font-size: 19px;"></i></button>

                </form>
            </div>
        </div>
    </div>
</div>
<div id="overlay">
    <div class="cv-spinner">
        <span class="spinner"></span>
    </div>
</div>
@{

    if (Model != null && Model.getQuestionWithPager.Questiones != null && Model.getQuestionWithPager.Questiones.Count > 0)
    {

        @(await Component.InvokeAsync("GetQuestionByQuizId", new { Questiones= Model.getQuestionWithPager.Questiones }))
        <div class="card-footer">
            @{
                if (Model.getQuestionWithPager.PagerDto != null)
                {
                    <paging page-no="@Model.getQuestionWithPager.PagerDto.PageNo"
                            page-size="@Model.getQuestionWithPager.PagerDto.PageSize"
                            total-records="@Model.getQuestionWithPager.PagerDto.TotalRecords"
                            show-prev-next="true"
                            show-total-pages="true"
                            show-total-records="true"
                            show-page-size-nav="true"
                            show-first-numbered-page="true"
                            show-last-numbered-page="true"
                            query-string-key-page-no="PageNo"
                            query-string-key-page-size="PageSize"
                            query-string-value="@@(Request.QueryString.Value)"
                            text-total-pages="صفحه"
                            text-total-records="رکورد"
                            text-first="&laquo;"
                            text-last="&raquo;"
                            text-previous="&lsaquo;"
                            text-next="&rsaquo;"
                            sr-text-first="اولین"
                            sr-text-last="آخرین"
                            sr-text-previous="قبلی"
                            sr-text-next="بعدی"
                            gap-size="2">
                    </paging>
                }
            }

        </div>

    }
}
@section Styles{
    @*<script src="~/lib/jquery/dist/popper.min.js"></script>*@

  
}
@section Scripts {

    <link href="~/lib/SweetAlert/sweetalert2.css" rel="stylesheet" />
        <script src="~/lib/SweetAlert/sweetalert2.js"></script>
        <link href="~/backend/css/Spiner.css" rel="stylesheet" />
    <script>
        $(document).ready(function () {
            $('[data-quizId]').click(function (event) {
                event.preventDefault();
                var quizId = $(this).attr('data-quizId');
                $('#QuizIdAddQuestion').val(quizId);
                console.log("quizId 2 : ", $(this).attr('data-quizId'));
                $('#myModal1100').modal('show');
            });
            $('.ggttrr').click(function (event) {
                event.preventDefault();


                console.log("quizId 2 : ", "0000000000000000000000000");
                $('#myModal1100').modal('show');
            });
        });
        function addQuestion(a, event) {
            //event.preventDefault()
            // $('#myModalAddQuestion').modal('toggle');


            //console.log("myModal2  : ", " show ");


            //  $('#myModalAddQuestion').modal('show');
            //$('#QuizIdAddQuestion').val(a);
            //console.log("param  : ", a);


        }

        function submitFormAddQuestion(event) {
            $('#myModalAddQuestion').modal('toggle');
            $("#overlay").fadeIn(300);
            var QuizId = $('#QuizIdAddQuestion').val();
            var Text = $('#TextAddQuestion').val();
            if (Text === null || Text == '') {

                Swal.fire({

                    icon: 'error',
                    title: 'ناموفق :(',
                    showConfirmButton: false,
                    timer: 2000
                })
                $("#overlay").fadeOut(300);
            }
            else {
                var RequestVerificationToken = $('#formAddQuestion input[name=__RequestVerificationToken]').val();
                var dataO = {
                    QuizId: QuizId,
                    Text: Text,
                };
                var formValues = $(this).serialize();
                console.log("dataO : ", dataO);
                console.log("__RequestVerificationToken : ", RequestVerificationToken);
                $.ajax({
                    type: "POST",
                    url: '/Admin/Question/Create',
                    headers: { "__RequestVerificationToken": RequestVerificationToken },
                    data: dataO,
                    success: function (data) {
                        $("#overlay").fadeOut(300);
                        console.log("data : ", data);
                        if (data.isSuccess) {
                            $('#QuizIdAddQuestion').val('');
                            $('#TextAddQuestion').val('');
                            Swal.fire({
                                title: data.message,
                                text: 'عملیات با موفقیت انجام شد ',
                                icon: 'success',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'باشه!',
                                showCancelButton: false,
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    location.reload();
                                }
                            })
                        } else {
                            $('#QuizIdAddQuestion').val('');
                            $('#TextAddQuestion').val('');
                            Swal.fire({

                                icon: 'error',
                                title: 'ناموفق :(',
                                showConfirmButton: false,
                                timer: 2000
                            })
                        }
                    }
                    , error: function (jqXhr, textStatus, errorMessage) {
                        $("#overlay").fadeOut(300);
                        $('#QuizIdAddQuestion').val('');
                        $('#TextAddQuestion').val('');
                        console.log('Error: ' + errorMessage);
                    }
                });
            }

        }
    </script>
}