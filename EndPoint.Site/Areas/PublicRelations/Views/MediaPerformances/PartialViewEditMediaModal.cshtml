@using Azmoon.Application.Service.PublicRelations.MediaPerformances
@model ResultDetailMedia
@using EndPoint.Site.Areas.PublicRelations.Helpers.Convertors;


<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <h4 class="modal-title" id="exampleModalLabel1">
                @(Model.ProgramName)
            </h4>
            @if (Model.Confirmation == true)
            {

                <span style="font-size:65%;" class="badge badge-pill badge-success">تایید شده</span>

            }
            else
            {
                <span style="font-size:65%;" class="badge badge-pill badge-secondary">تایید نشده</span>

            }
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
            </button>
        </div>
        <div class="modal-body">
            <input type="hidden" id="idInput" value="@Model.Id">

            <div class="form-row">
                <div class="col-md-4 mb-3">
                    <label for="validationDefault01">نام رسانه</label>
                    @*<input type="text" class="form-control" id="NewsAgencyName" value="@Model.Media">*@
                    <select class="form-control" name="Name" asp-items="@ViewBag.Media" id="MediaId" placeholder="رسانه">
                        <option value="" disabled selected>انتخاب رسانه</option>
                    </select>
                    <small style="text-align:right; color:red;">@("رسانه قبلی" + " " + Model.Media)</small>
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault02">نام شبکه</label>
                    <input type="text" class="form-control" id="NetworkNameId" value="@Model.NetworkName">
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault02">نام برنامه</label>
                    <input type="text" class="form-control" id="ProgramNameId" value="@Model.ProgramName">
                </div>
                <div class="col-md-12">
                    <label for="validationDefault02">موضوع برنامه</label>
                

                     @if (ViewBag.Subjct == null || !((SelectList)ViewBag.Subjct).Any())
                                {
                                 <select class="form-control" disabled>
                                   <option>موضوعی برای انتخاب وجود ندارد</option>
                                 </select>
                                }
                                else
                                {
                                 <select class="form-control" name="Name" asp-items="@ViewBag.Subjct" id="SubjectId" autocomplete="off">
                                     <option value="" disabled selected>انتخاب موضوع برنامه</option>
                                 </select>
                                }
                    <small style="text-align:right; color:red;">@("موضوع قبلی" + " " + Model.SubjectTitle)</small>


                </div>
                <div class="col-md-12">
                    <label for="validationDefault02"> توضیحات</label>
                    <input type="text" class="form-control" id="DescriptionId" value="@Model.Description">
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault01">مستند</label>
                    <input type="file" id="ImageId" class="form-control" value="">
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault02">مدت برنامه</label>
                    <input id="TimeId" data-jdp data-jdp-only-time class="form-control form-control-danger" placeholder="@Model.Time" autocomplete="off">
                </div>
                  <div class="col-md-4 mb-3">
                    <label for="validationDefault02"> ساعت پخش</label>
                    <input id="TimeStartId" data-jdp data-jdp-only-time class="form-control form-control-danger" placeholder="@Model.BroadcastStartTime" autocomplete="off">
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault02">تاریخ برنامه</label>
                       <input type="text" id="date-input" data-jdp data-jdp-miladi-input="miladi_date" class="form-control" value="@Model.BroadcastDate.ToShamsi()" autocomplete="off">
                                <input type="hidden" id="miladi_date" />
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault01">اپراتور</label>
                    <input type="text"
                           class="form-control"
                           id="Operator"
                           value="@(Model.Operator == null ? "بدون انتخاب": Model.Operator)"
                           disabled>
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault02">تاریخ ایجاد</label>
                    <input type="text" class="form-control" id="validationDefault02" value="@Model.InsertTime.ToShamsi()" disabled>
                </div>
                <div class="col-md-4 mb-3">
                    <label for="validationDefault02">تاریخ بروز رسانی</label>
                    <input type="text"
                           class="form-control"
                           id="validationDefault02"
                           value="@(Model.UpdateTime == null ? "بروز رسانی نشده": Model.UpdateTime?.ToShamsi())"
                           disabled>
                </div>
            </div>


        </div>
        <div class="modal-footer">

            <button type="button" class="btn btn-danger" data-dismiss="modal">بستن</button>
            <a onclick="EditMedia()" class="btn btn-primary" style="color:white;">تایید</a>
        </div>
    </div>
</div>




@*Date Picker - برای استفاده در پارشیال ویو *@
<script>
    // تابع تبدیل تاریخ
    function jalali_to_gregorian(jy, jm, jd) {
        jy = Number(jy);
        jm = Number(jm);
        jd = Number(jd);
        var gy = (jy <= 979) ? 621 : 1600;
        jy -= (jy <= 979) ? 0 : 979;
        var days = (365 * jy) + ((parseInt(jy / 33)) * 8) + (parseInt(((jy % 33) + 3) / 4))
            + 78 + jd + ((jm < 7) ? (jm - 1) * 31 : ((jm - 7) * 30) + 186);
        gy += 400 * (parseInt(days / 146097));
        days %= 146097;
        if (days > 36524) {
            gy += 100 * (parseInt(--days / 36524));
            days %= 36524;
            if (days >= 365) days++;
        }
        gy += 4 * (parseInt((days) / 1461));
        days %= 1461;
        gy += parseInt((days - 1) / 365);
        if (days > 365) days = (days - 1) % 365;
        var gd = days + 1;
        var sal_a = [0, 31, ((gy % 4 == 0 && gy % 100 != 0) || (gy % 400 == 0)) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var gm
        for (gm = 0; gm < 13; gm++) {
            var v = sal_a[gm];
            if (gd <= v) break;
            gd -= v;
        }
        return [gy, gm, gd];
    }

    // تابع راه‌اندازی datepicker
    function initializeDatepicker() {
        // راه‌اندازی datepicker
        if (typeof jalaliDatepicker !== 'undefined') {
            jalaliDatepicker.startWatch();
        }

        // استفاده از event delegation برای المنت‌های داینامیک
        $(document).off('jdp:change', '[data-jdp-miladi-input]').on('jdp:change', '[data-jdp-miladi-input]', function(e) {
            var miladiInputId = $(this).attr('data-jdp-miladi-input');
            var miladiInput = document.getElementById(miladiInputId);
            
            if (!miladiInput) {
                console.error("Element with id '" + miladiInputId + "' not found");
                return;
            }
            
            if (!this.value) {
                miladiInput.value = "";
                return;
            }
            
            var date = this.value.split("/");
            if (date.length === 3) {
                var gregorianDate = jalali_to_gregorian(date[0], date[1], date[2]);
                miladiInput.value = gregorianDate.join("/");
                console.log("تاریخ میلادی تنظیم شد:", miladiInput.value);
            }
        });
    }

    // اجرای بلافاصله پس از لود پارشیال
    initializeDatepicker();

    // همچنین بعد از نمایش مودال
    $('#EditMediaPerformances').on('shown.bs.modal', function() {
        setTimeout(function() {
            initializeDatepicker();
        }, 300);
    });
</script>



@section Scripts
{

    
}
<script type="text/javascript">
    function EditMedia() {
        // لاگ مقادیر ورودی
        console.log("🟡 شروع فرآیند ویرایش...");
        
        var Id = $("#idInput").val();
        var Media = $("#MediaId").val();
        var NetworkName = $("#NetworkNameId").val();
        var ProgramName = $("#ProgramNameId").val();
        var SubjectId = $("#SubjectId").val();
        var Description = $("#DescriptionId").val();
        var BroadcastDate = $("#miladi_date").val();
        var Time = $("#TimeId").val();
        var BroadcastStartTime = $("#TimeStartId").val();
        var ImageFile = $("#ImageId")[0]?.files[0]; // استفاده از optional chaining

        // لاگ مقادیر دریافت شده
        console.log("📋 مقادیر فرم:");
        console.log("🔹 ID:", Id);
        console.log("🔹 Media:", Media);
        console.log("🔹 NetworkName:", NetworkName);
        console.log("🔹 ProgramName:", ProgramName);
        console.log("🔹 SubjectId:", SubjectId);
        console.log("🔹 Description:", Description);
        console.log("🔹 BroadcastDate:", BroadcastDate);
        console.log("🔹 Time:", Time);
        console.log("🔹 BroadcastStartTime:", BroadcastStartTime);
        console.log("🔹 ImageFile:", ImageFile ? "فایل انتخاب شده" : "بدون فایل");

        // بررسی مقادیر ضروری
        if (!Id) {
            console.error("❌ ID خالی است");
            Swal.fire({
                icon: 'error',
                title: 'خطا',
                text: 'ID نمی‌تواند خالی باشد'
            });
            return;
        }

        // ایجاد یک شیء FormData برای ارسال داده‌ها
        var formData = new FormData();
        formData.append('Id', Id);
        formData.append('Media', Media || '');
        formData.append('NetworkName', NetworkName || '');
        formData.append('ProgramName', ProgramName || '');
        formData.append('SubjectId', SubjectId || '');
        formData.append('Description', Description || '');
        formData.append('BroadcastDate', BroadcastDate || '');
        formData.append('Time', Time || '');
        formData.append('BroadcastStartTime', BroadcastStartTime || '');
        
        // اضافه کردن فایل تصویر در صورت وجود
        if (ImageFile) {
            formData.append('Image', ImageFile);
        }

        // لاگ URL و داده‌های ارسالی
        console.log("🌐 ارسال درخواست به:", '@Url.Action("PartialViewEditMediaModal", "MediaPerformances")');
        console.log("📤 داده‌های FormData:", formData);

        $.ajax({
            url: '@Url.Action("PartialViewEditMediaModal", "MediaPerformances")',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                console.log("✅ پاسخ سرور دریافت شد:", response);
                
                if (response.success) {
                    console.log("🎉 ویرایش با موفقیت انجام شد");
                    Swal.fire({
                        icon: 'success',
                        title: 'ویرایش موفق',
                        text: 'ویرایش با موفقیت انجام شد.'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    console.error("❌ خطا در پاسخ سرور:", response.message);
                    Swal.fire({
                        icon: 'error',
                        title: 'خطا',
                        text: response.message || 'خطایی رخ داده است'
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error("❌ خطای AJAX:");
                console.error("🔴 Status:", status);
                console.error("🔴 Error:", error);
                console.error("🔴 Response Text:", xhr.responseText);
                
                Swal.fire({
                    icon: 'error',
                    title: 'خطا',
                    text: 'خطایی در ارتباط با سرور رخ داده است. لطفاً دوباره تلاش کنید.'
                });
            }
        });
    }
</script>


